import unittest
import json
from pydrawio.mxlibrary import Mxlibobject, Mxlibrary

class TestMxlibrary(unittest.TestCase):
    def test_mxlibrary(self):
        tests = '<mxlibrary>[{"xml":"lFXdbqM6EH4ariqtHGP2bI/UiwQoYeUxaYFtyR0BFnBIiAIOmKc/MuSHrfbmRLHwzHzz69GMppuH3jnHpwLqNKs0jNL+RcN4/KNUPu75uUz/pPxyyGYcUaZZ86Dbuq7a8jTjJPXxmCXtgxGfz3U3A/yuq5mLU5xnf1J+EldfWB9l2hZ/stZZmRczL4d4jmiKOK27G63bmm6e67qdbofezCpVhClVdIdo+PUq+xtucXN+zo7t/1G8xnSJKzHLq2nllGZTxKfspTzEeabpq0t2bsskrmi8y6pN3ZRtWR9fdnXb1oeZeFmV+fGlrU+avhpVl81JVR1p+iqerr/LPks1fZWlZRvvqsxsmndRZc3LNw0vb2ovadzG/07O8WtzyZ/6Q6Vhc7NmeCtXZPfRi2RAZbx+R4lVX6ie6qk0dJDGJTkkF+DLDsznIT0kpbvenrafqbnT82eXL3Mwl5KNx81Tp0I7J3x2j2kdfb4P0eeqczn5sZWr09ZCZYqLIl2zIlkvyw3vu+jzvXadt2d3j3omCaZWJGD4uWKSEOZ3OuX5glrLBsyuo5YtqfXWMEkMZirZHj1koYDAbSAIhWdVwMxOgtMhyt0WfNJHQSK8AEZdkAo/6g2UJwa1XmtwbEKt/Gpr2XgmUvaHtyBvPPOOn8cYB4GKxyaUh0MURIIFecNKsrjjfTRQDpj6xIBD11LuIuqTnvlIUv5mUB7h8QSuYBa0lNsKK1loK76yhW9+qWVPWCsRwNNCyZjfKd7igXEbZhLM9jdsJBiPbrVrpvrkggUs3gUgGLdbZhKDOcq3q/yPtWISqVzUfWA+Eoy/D9QnA5RIgKJVrT9sg1r7m+2W8kjVUo8kEhDYAoI3ZXOg3F5QnyBV8ygIBQzQMGVL3mskKY8MVQMYfnGVv/IBQyhGfwPcYuk8xxYw5Orc3wlMNOqN3ym2CWuiMT/wCWK6yg/kmIOcMJQD8q29gKAqKE/68dx6yScLkOM7SMpVnq6AYD/rja4Hk/QM2wPluaQWCM9y73LK837UscLGMwnx/I5QnhuPXgUBw74BqfpP9bfSDx85lWTwTLJQ7wnlo/coB/UOqvd7yiPVe4LxuV9bjnIbenbFgSS6+jKfEPBHGnv+SOMrvfB+1eWGd5fEeUWxRX5QnDxt1gxlH321Oa6K1MnzDG9PO6f77jo/m+iDnT25GtL1z0uMw++uY1x2h/Cf30F3SfR3Y+eET5tpVjx9naXX4arGW9bfGddp6mT1IWvPUsNotrZmW6u77QdMvqHxN/GL+5L4IojHfZTf7c7n+N3b30a7hl8fi2SCP9aqbv8HAAD//wEAAP//","w":24,"h":24,"title":"whatsapp"},{"xml":"lFVbr6K6F/80PO1kUik7M/4THxDYyj+0egTPHnmr0MEiWGNbuXz6kxYvbGdykmNcabvuv7XKqgW9ul1cyPmAeE4rywZ5O7Ns2/xB3j33xYXlX08x6+mIo1hOxfMsOa8kO484GT+daCafDHK58Gak8ItXoxBnUtCvpzgj1Qvrk+Xy8JW1pKw4jKLUZKwhDiTnzf0MAwt6F87lsKtbj1a6CANU8FCx7I+b7E96k3vwCz3J/2J4y+lKKjXCJWQ3wBQHcqYzVpOCWnB+pRfJMlJFZE+rNRdMMn6a7bmUvB6J3YoVp5nkZwvOjakrzrrqwIJzMmx/sZbmFpzTnEmyr6gnxEZVVMy+WbZ7N5vlRJL/DcHtD3Et3tq6smxvvcR22s2d/Wersh4wstyAzOfXCOYw794h6t6vWZ1dUek2yJv2eZ2xcJme05+5t4fFNCzdAnluhw2FRb6owH6xnYan/JzWR7Yu21O4qI7r+P+QfKbnsHR+ZIsPQLy55mGUZAr1W4GSUOG+OkRl1hnyXYG8po1iB6xioFByFLhzOuw1MCpDcJM3UXJUuNzpvcL9VtPA9wOJYqfBDCjk7xTuDd1lIipdGCWBlomV58DILxTutMwVKG5aFDs21rqeAzHT9JAp5GfC+D4GCvdHTQ+/L3iIxhvB+SFfFG/rpVmL1AcsSUKt3+ziV/9A4SSQURkKlLhqpWPdVxPDlSjZvuJtB7ygjcrAxEYa63195iZQELzWSaDSFSiZ/0uuR4X6QqBkq3C50T2aGHr2yI5ip4/KDBi68z2nxSYndxL5W1NrbHryqKUdlYHx85tPY9sMtmVmG7rLTN+2ytShcyaruOmjcvv+vBN/DT0wWAtND6yr2OlXXtNi3d8PztZlczX30X+9l7r+2vbvr3h1TroHsTMh/vz3WhgdZ/LJwre1N212Pzdcx0h750cGN+/7xfbtFud7Wldi7/NiV7eHnS2+h0sMsnp6SRNe7OupShM5XetvblmJNNG9wXbaO7PX+XQbWHpk0PbBuE2oBeU1lZfOssHoKRi9BM195trON2B+A//wGLwvAmJmfPHwO56Nj2h/GpeW/fEczoP686mCwT8AAAD//wEAAP//","w":24,"h":24,"title":"wifi"},{"xml":"lFVtj6o6EP41fNrkhC147vEmfuBN5ASqqyCL3wrtQjkgRN759TcUVNx1b+41NrTzTGeemU5mOEFJW/2C8sjKMEk4wON2xQHA/jzu7vvwQvHj6UB7MpNUFJPifi6zLClpPpME2flMgvIuQJdL1swUPrJk5iJHIXk8HQKUfBK5FJfRo2hDaBjNvKRorlFECGfN9SxonKBcsqwcd2mrkGRIwhgqf1PhwHrCnum9Xp1fyLn8PxcnTjVKqllcRdmNYRYRysmKpigknCDX5FLSACUm8kmyywpa0uy88rOyzNIZLCU0PK/KLOcEmV2VinzIOs8JMhq3H7QlmBNkgmmJ/IQoRbGvElKsfnBAul5bYVSiv0fnYF3U4UubJhxQdhsITp0s+m5bBT1P0WbPB2pWmwIWcLcQrG5RB2lQW7HUWMqyx2lAjc0pP71jxRfCpRFLoaVIHWTLCLGe8L7uLI0zzv10X+PutfTeo9x3k5+ng/Gy04MQuW/f4xs5wnoYnlSe2rYmmqrRmHHwelC1zjuIAmSraUxVKqzha2sVdEPwZmuVFTuFdRC7G6407XY8t9u1972O0vCjj5M8Ya0ZG68T3pjqWwV7p4BnD3zlwLfmYJPZN5ieRR84AlO1Kis+GpYdyRPWDf6u/q8xmurJ/V7nnguXGi87Zdl47/tsF7fsa+hvS+MP30LatOy+q1Ww94Y1xaCVzN7A/eiJ/yGnPMMGW/SGDfFVsD8CqH2xX1i2V1gsB0dkxOIvU2Bv+flNx3zZLCeyGQc8W/c4h9WbyhdeLVvp8FZOCRXx9Qn31owlYKpaZakny7KNwrLhcx93Dv/CNSysWBriMaAz3AmY7YeYu6m+jl4L/zzXGXCoiB10QnGoQYYdHvK6GN9aAziG8oRNtq6cb1yQf+B70z5GrEbndcpqV+zgu9d71/29zofaZ3W41bRp70wcpWKrPMTxBG9alutjRndxUwf6mkeq+MsEwctuA3nitsnuPOaOgFPu681PQ/9deC68bDu5x5vfNQLOT0Nf1H7q/PVhN3Ug7Be+7gy1PPSVl899d2rEQysk7U0wdV6dZCkpLx0H+NmIm0245jpLgPiDZ79RHt0GyicAsdkV3uzOe/7N27MxwIH1feiM6vcRLGj/AAAA//8BAAD//w==","w":24,"h":24,"title":"window-maximize"},{"xml":"lFVtj6o6EP41fDI5QcC9Z2/iB95ENpR1BfXKt0K7ULYI4R1+/Q1viq5nk2Mkaed5Op15OplheDmqtRQmAYgRpgzHonrNcFz/Z1FzW/spQfc7i7R4ZikIwtltn8cxzUkys3jx5YK9/GaAaRpXM8JnTGdXJNDH9zvLg/TBdCIoD+5NW0z8YHZLBOeMLIAorqY9rzK8nMZxPqyiWsa0E2FIlb1SGG4zYs94y+nyFF/yvzk4xlRCWszyyvJmSDMLYILXJII+ZnipxGlOPEgN6GK6izOSk/iyduM8j6MZLFLiX9Z5nDC81B8Vs6RTnWV4CQ7LT1JjxPASRiSHLsVylu0LirP1L4YTp2NrBHP473A5t8lKf1FHlOHk3dbknEYS3FNdeC1L4HbPekpcGjziUbPiQbMqvcgrQShWQH5tUeQRfeskzn9Idnn/VQ9FH8hiY/af7iONsq52eNUvKHGjfYmaZQ5Pq8Q90RfH0hc7zfPh6ePP+FYKkOb7jsIS21YFQwEFCI+6+aU2RugtDUUvzPaQAbmqDEXMQCM0plVxKHSCHu854oirhWlV1TF0JGD1vNoI9QmvDeWcmbLAmwe/flfVEVMLEE7+1QzYX/3epOcfOP7IO+rAfnsSh5gBS1hCxZEAEXjTqpp7XK+GvSr0sT7lXLWAeij8Nvhep0e9uvhqQ1FbI1RXZ6vz0/uqRj8FCL8KoDixqamdjvdaymxt9DmAArSbXltA2NYI9ea7r44rcoatdv4yozsT6sMZehaM8PhdB3t4DxTuv2OyUJlEaN4PXVz9d4uruyPsdAYFsOkP+Xfv8DHUy6HTwuP6GmjPj/VSm5dz+2GPWJcXuWq0nN7DUgJpxEZf01t8DbrZ9ARs5w+cayzQtv2hXmwa9PUzr8G+LoXGPPjLj2k9aWxV7FgXq2Oock/wDluOsX73LY/8Y0x2YVV62oaFivDb4LzFbmuy+FTT3WXQD3NO4mrVi669ZeeTmb43Uou2byXkDi+6tird6PDPp12VHr9fudphsRt6weKxV47Ns2tfuL4axm6p4TjCedowHDsbS7OpVE39nxN+sf1vsAfXIfAAwH7e+Fe/8z59ve1Z62a4zW1QDPTb2OTV/wEAAP//AQAA//8=","w":24,"h":24,"title":"window-minimize"},{"xml":"lFXdjqM4E30arloaOUDm03xSXxBIE2ZtJ2lgs8kdf0PsQIgCxJinX5VNfno0N9vqSHa5yqfq1MFlWG49+NfkciRNXlSGifLh3TBN9Y9y+VyXV5Z/3YVsLF4sPcuL9rnvmqbq2OXFkjXnc5F1T0NyvTbixeFXU71AXJKy+LoLs6T6zbRjeXf8aloVrDy+oNTJq0d7TPJG3PfW0rDca9N0elUPblEBCbpU9HAxzI/p7E9+szv4tTh3/yVwyumWVP1LXW0ndZntMbkU76xOysKwFrfi2rEsqXCSFtWmaVnHmvN72nRdU78cOxUrz+9dczGshQp12guwjgxrkejlLzYUuWEtipx1SVoVbtt+9lXRvn8zTOce9p4nXfJ/DW5+tLfybagrw3Q3K2oe5OJy8BDLrZ9VWtMmYAs73Q19NiKWrD5R5jU3bOVWLucWkfNbVmc3wh1B3B9jXmcsWB0uh39yN7XKHwF3SuI6kqpfUOZ+hVI//hGcc3nYzXniBm8uc8rNanHM/bIE3Cja9yQKWsKdno5/N8QnHeaZiT2nI6GN1i7qiUQSc2fEoW1TFw2YLyWOlhAHPgNhcH4aIYa6tqA7McM8HnAU9zT64Di0Z+C/jrYt5g7C0bYnHmnhfsrQDPPtDHvLnnpEYRIpRszjUcecWqrzGDDfmti1JWWiJ17WPvZS9DQirYoBfCl6wvctcZW9w3w5x65tkVp0hNmIhkIqTNeeESYGzE8D4K+jJdwhsRf01Iu17470JDrd70BUInU35pnEoT2sQzHtHUudQ248u+cyI1NuJLTnNEQ98YJWcRRO9XhxT71S161y2UockZ5GSx3zhZ9DqzldAiczsoPaYgQ4ui8B8AE9gn5Jtf64UBJte8pLwLWoCTEn8BOa0xLynuEo6GmUAebU2y2sB31vPAAna2+pY71tT8a4xRz4CiBe6DpL4MkGrte+6Gho20SCFspxL9GzR6HiBWqFHg1KO/e+Ki7hB1o5KU4Tb8ExJ6BJ4H3AKi/Rr6N9h/lnq3HQhGNLAjyr3GLw1foYp9yAR6XDGGGPTH5gVzXdubFwaFvgS6Il9MYkIeQZgCZm1BTapmrYq9pIdGqVRkDTWn/wHUFdw3qndGdRF8E3xlVODLSQdUoDKkc0aTUeU+UX6xj1PTqWjhECuIPatSazMYV6ONH5zBq24eKW+R8o8ey/NiuKit1Qbc76ey/MwyX1xffA/9nud/S6losxX/28JWb8PfDnt7SO//crErfM+pynfvy20W/M2+9v8vRIwzNZDA/D9Cr7RVMX3VUaJnoZfy/TT9znjGl/Q+pP24+PYfPbQaLmWvm493UePND+NCIM8+M5kLT7czxby38BAAD//wEAAP//","w":24,"h":24,"title":"wrench"},{"xml":"lFRfc6I+FP00PHVmJyVxtv5mfFCwSiehInZbeQskC2GDcUiQP5/+N4oo7XQf1pFJcnLuvSeBeyzoFM2qpMeMKMalZQPWzCzbvvwBa+/ztBTs8yoUHR8hlWBc39dGKWnEcYQk6nDgibkDtCxVPSL8VnJU4khT/nkVJlR+gd4FM9lnaM1Fmo2qFHTM0Bllqh7WcGlBp1TK9LOicbg8X0J/VHCjWPbzde873uNQvOQH8y+BV00nKqvRubRp+2PqjB75TBQ05RZcnHhpREIlpjGXG6WFEeowi5Uxqhhtz6VIDzOjjhZcXELn+ni+dWDBBe2nv0XDmQUXnAlDY8kdrbeV5Hr2w7LnQ9iMUUP/64vbz/qUPjSFtGxns/btqF2g+L2pkg4Iut6CxFUnDBlk7QSSdnJKiuRE8nlNnGnHikR46+gYfTAnhunUy+cpceatf3m8lK0kiFdvU+8gT+xj+7gv3sQmbw7eSv7ZhC+TGP4C7P1Fejl6SlbPgDqLM+6T3Z/KzxP96qDGXy1b7HqaOHWN3bkhIQJEgAbnQRfsAoTzAGB3GOdX3jlmX5Euy3w3rXw30MM45PEFav0QdQR8yq99B3WkrRHOlwC7XoNzD97HIX+gye4lI/my8s+xw3jNgXPSYZdUr26qiajbka6eF6KR5q/a9xXJ3yrSEf0X7brXDi6cb/Jf7ijYnTUHba89GHG86/387WzLCc73ELtpRXZbGodggnPS9Lp+vb+GyCagbnwHPfph3ZCiNr6DmtewbnFO0LvwHjbOtN5/bNUmr09Rh54SuJ3Eq7eH6zv+GRVSx65K90WT7W3901v7ICmmZbRTaVxMq2hnppvz97WWOtqhJwx9O+rQ7GsvXpvz3B68uQHXblxxVXBTtpYNRrY3cr168Bcb/QCXX49nN5P5skEvfpbe8o594FbtO2uw7Oe7EfX0uy3D5f8AAAD//wEAAP//","w":24,"h":24,"title":"youtube"}]</mxlibrary>'
        mxlibrary = Mxlibrary(tests)
        diagrams = json.loads(mxlibrary.value)
        for diagram in diagrams:
            mxlibobj = Mxlibobject(**diagram)
            self.assertEqual(24, mxlibobj.w)
            self.assertEqual(24, mxlibobj.h)
            self.assertTrue(mxlibobj.title in [ 'youtube', 'wrench', 'window-minimize', 'window-maximize', 'wifi', 'whatsapp' ])

    def test_mxlibrary_with_empty_str(self):
        mxlibrary = Mxlibrary()
        self.assertEqual('mxlibrary', mxlibrary.make_tree().getroot().tag)
        self.assertEqual('[]', mxlibrary.make_tree().getroot().text)

    def test_mxlibrary_with_empty_dialog(self):
        mxlibrary = Mxlibrary('<mxlibrary>[]</mxlibrary>')
        self.assertEqual('mxlibrary', mxlibrary.make_tree().getroot().tag)
        self.assertEqual('[]', mxlibrary.make_tree().getroot().text)

    def test_mxlibrary_write(self):
        mxlibrary = Mxlibrary('<mxlibrary>[]</mxlibrary>')
        mxlibrary.write('/dev/null')
